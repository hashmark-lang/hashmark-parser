/*! This file was generated by Hashml https://github.com/hashml/hashml */
import { HMError, parse, SchemaDefinition } from "../../../../src";
export type Tag = (Block | Inline);
export type Block = (ParagraphBlock | SectionBlock | IdBlock | CodeBlock);
export type Inline = (LinkInline | BoldInline | StrongInline | CodeInline | InlineInline);

export interface Root {
    $tag: "root";
    content: (ParagraphBlock | SectionBlock | CodeBlock)[];
}

export interface ParagraphBlock {
    $tag: "paragraph";
    text: (LinkInline | BoldInline | CodeInline | StrongInline | InlineInline | string)[];
}

export interface SectionBlock {
    $tag: "section";
    content: (ParagraphBlock | SectionBlock | CodeBlock)[];
    id: (IdBlock | null);
    title: (LinkInline | BoldInline | CodeInline | StrongInline | InlineInline | string)[];
}

export interface IdBlock {
    $tag: "id";
    content: string;
}

export interface CodeBlock {
    $tag: "code";
    content: string[];
    language: string;
}

export interface LinkInline {
    $tag: "link";
    url: URL;
    text: (BoldInline | string)[];
}

export interface BoldInline {
    $tag: "bold";
    text: (LinkInline | string)[];
}

export interface StrongInline {
    $tag: "strong";
    text: (LinkInline | string)[];
}

export interface CodeInline {
    $tag: "code";
    content: string;
}

export interface InlineInline {
    $tag: "inline";
    inlineContent: (LinkInline | BoldInline | CodeInline | StrongInline | InlineInline | string)[];
}
const schema: SchemaDefinition = {
    "root": {
        "rawBody": false,
        "props": {
            "body": {
                "content": {
                    "paragraph": {
                        "min": 0,
                        "max": Infinity
                    },
                    "section": {
                        "min": 0,
                        "max": Infinity
                    },
                    "code": {
                        "min": 0,
                        "max": Infinity
                    }
                }
            }
        },
        "defaultTag": "paragraph"
    },
    "blocks": {
        "paragraph": {
            "rawBody": false,
            "props": {
                "head": {
                    "raw": false,
                    "name": "text",
                    "content": [
                        "link",
                        "bold",
                        "code",
                        "strong",
                        "inline"
                    ]
                }
            }
        },
        "section": {
            "rawBody": false,
            "props": {
                "head": {
                    "raw": false,
                    "name": "title",
                    "content": [
                        "link",
                        "bold",
                        "code",
                        "strong",
                        "inline"
                    ]
                },
                "body": {
                    "content": {
                        "paragraph": {
                            "min": 0,
                            "max": Infinity
                        },
                        "section": {
                            "min": 0,
                            "max": Infinity
                        },
                        "code": {
                            "min": 0,
                            "max": Infinity
                        }
                    },
                    "id": {
                        "id": {
                            "min": 0,
                            "max": 1
                        }
                    }
                }
            },
            "defaultTag": "paragraph"
        },
        "id": {
            "rawBody": false,
            "props": {
                "head": {
                    "raw": true,
                    "type": "string",
                    "name": "content"
                }
            }
        },
        "code": {
            "rawBody": true,
            "props": {
                "body": "content",
                "head": {
                    "raw": true,
                    "type": "string",
                    "name": "language"
                }
            }
        }
    },
    "inline": {
        "link": {
            "sugar": {
                "start": "[",
                "separator": "](",
                "end": ")"
            },
            "args": [
                {
                    "raw": true,
                    "type": "url",
                    "name": "url"
                },
                {
                    "raw": false,
                    "name": "text",
                    "content": [
                        "bold"
                    ]
                }
            ]
        },
        "bold": {
            "sugar": {
                "start": "*",
                "end": "*"
            },
            "args": [
                {
                    "raw": false,
                    "name": "text",
                    "content": [
                        "link"
                    ]
                }
            ]
        },
        "strong": {
            "args": [
                {
                    "raw": false,
                    "name": "text",
                    "content": [
                        "link"
                    ]
                }
            ]
        },
        "code": {
            "sugar": {
                "start": "`",
                "end": "`"
            },
            "args": [
                {
                    "raw": true,
                    "type": "string",
                    "name": "content"
                }
            ]
        },
        "inline": {
            "args": [
                {
                    "raw": false,
                    "name": "inlineContent",
                    "content": [
                        "link",
                        "bold",
                        "code",
                        "strong",
                        "inline"
                    ]
                }
            ]
        }
    }
};

export function parseTyped(file: string): Root | HMError[] {
    const errors: HMError[] = [];
    const logger = (err: HMError) => errors.push(err);
    const result = parse(file, schema, logger);
    if (errors.length === 0) {
        return (result as unknown) as Root;
    } else {
        return errors;
    }
}
