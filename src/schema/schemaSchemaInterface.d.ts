/* This file was generated by Hashml https://github.com/hashml/hashml */
export interface Root {
	$tag: "root";
	root: BlockRoot;
	blocks: BlockBlock[];
	inline: BlockInline[];
}
export type Tag = BlockTag | InlineTag;
export type BlockTag =
	| BlockRoot
	| BlockBlock
	| BlockDefault
	| BlockHead
	| BlockBody
	| BlockProp
	| BlockOptional
	| BlockOne
	| BlockOneOrMore
	| BlockZeroOrMore
	| BlockInline
	| BlockArgs
	| BlockHashml
	| BlockItem
	| BlockString
	| BlockDate
	| BlockUrl
	| BlockSugar
	| BlockStart
	| BlockSeparator
	| BlockEnd;
export type InlineTag = never;
export interface BlockRoot {
	$tag: "root";
	defaultTag: BlockDefault | null;
	body: BlockBody;
}
export interface BlockBlock {
	$tag: "block";
	defaultTag: BlockDefault | null;
	head: BlockHead | null;
	body: BlockBody | null;
	name: string[];
}
export interface BlockDefault {
	$tag: "default";
	name: string[];
}
export interface BlockHead {
	$tag: "head";
	type: Array<BlockHashml | BlockString | BlockDate | BlockUrl>;
}
export interface BlockBody {
	$tag: "body";
	props: BlockProp[];
}
export interface BlockProp {
	$tag: "prop";
	content: Array<BlockOptional | BlockOne | BlockOneOrMore | BlockZeroOrMore>;
	name: string[];
}
export interface BlockOptional {
	$tag: "optional";
	target: string[];
}
export interface BlockOne {
	$tag: "one";
	target: string[];
}
export interface BlockOneOrMore {
	$tag: "oneOrMore";
	target: string[];
}
export interface BlockZeroOrMore {
	$tag: "zeroOrMore";
	target: string[];
}
export interface BlockInline {
	$tag: "inline";
	args: BlockArgs;
	sugar: BlockSugar | null;
	name: string[];
}
export interface BlockArgs {
	$tag: "args";
	args: Array<BlockHashml | BlockString | BlockDate | BlockUrl>;
}
export interface BlockHashml {
	$tag: "hashml";
	content: BlockItem[];
	propName: string[];
}
export interface BlockItem {
	$tag: "item";
	target: string[];
}
export interface BlockString {
	$tag: "string";
	propName: string[];
}
export interface BlockDate {
	$tag: "date";
	propName: string[];
}
export interface BlockUrl {
	$tag: "url";
	propName: string[];
}
export interface BlockSugar {
	$tag: "sugar";
	start: BlockStart;
	separator: BlockSeparator | null;
	end: BlockEnd;
}
export interface BlockStart {
	$tag: "start";
	token: string;
}
export interface BlockSeparator {
	$tag: "separator";
	token: string;
}
export interface BlockEnd {
	$tag: "end";
	token: string;
}
