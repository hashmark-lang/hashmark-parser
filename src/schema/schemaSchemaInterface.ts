/*! This file was generated by Hashml https://github.com/hashml/hashml */
import { HMError, parse, SchemaDefinition } from "..";
export type Tag = Block | Inline;
export type Block =
	| RootBlock
	| BlockBlock
	| DefaultBlock
	| HeadBlock
	| BodyBlock
	| PropBlock
	| OptionalBlock
	| OneBlock
	| OneOrMoreBlock
	| ZeroOrMoreBlock
	| InlineBlock
	| ArgsBlock
	| HashmlBlock
	| ItemBlock
	| StringBlock
	| DateBlock
	| UrlBlock
	| SugarBlock
	| StartBlock
	| SeparatorBlock
	| EndBlock;
export type Inline = never;

export interface Root {
	$tag: "root";
	root: RootBlock;
	blocks: BlockBlock[];
	inline: InlineBlock[];
}

export interface RootBlock {
	$tag: "root";
	defaultTag: DefaultBlock | null;
	body: BodyBlock;
}

export interface BlockBlock {
	$tag: "block";
	defaultTag: DefaultBlock | null;
	head: HeadBlock | null;
	body: BodyBlock | null;
	name: string;
}

export interface DefaultBlock {
	$tag: "default";
	name: string;
}

export interface HeadBlock {
	$tag: "head";
	type: Array<HashmlBlock | StringBlock | DateBlock | UrlBlock>;
}

export interface BodyBlock {
	$tag: "body";
	props: PropBlock[];
}

export interface PropBlock {
	$tag: "prop";
	content: Array<OptionalBlock | OneBlock | OneOrMoreBlock | ZeroOrMoreBlock>;
	name: string;
}

export interface OptionalBlock {
	$tag: "optional";
	target: string;
}

export interface OneBlock {
	$tag: "one";
	target: string;
}

export interface OneOrMoreBlock {
	$tag: "oneOrMore";
	target: string;
}

export interface ZeroOrMoreBlock {
	$tag: "zeroOrMore";
	target: string;
}

export interface InlineBlock {
	$tag: "inline";
	args: ArgsBlock;
	sugar: SugarBlock | null;
	name: string;
}

export interface ArgsBlock {
	$tag: "args";
	args: Array<HashmlBlock | StringBlock | DateBlock | UrlBlock>;
}

export interface HashmlBlock {
	$tag: "hashml";
	content: ItemBlock[];
	propName: string;
}

export interface ItemBlock {
	$tag: "item";
	target: string;
}

export interface StringBlock {
	$tag: "string";
	propName: string;
}

export interface DateBlock {
	$tag: "date";
	propName: string;
}

export interface UrlBlock {
	$tag: "url";
	propName: string;
}

export interface SugarBlock {
	$tag: "sugar";
	start: StartBlock;
	separator: SeparatorBlock | null;
	end: EndBlock;
}

export interface StartBlock {
	$tag: "start";
	token: string;
}

export interface SeparatorBlock {
	$tag: "separator";
	token: string;
}

export interface EndBlock {
	$tag: "end";
	token: string;
}
const schema: SchemaDefinition = {
	root: {
		rawBody: false,
		props: {
			body: {
				root: {
					root: {
						min: 1,
						max: 1
					}
				},
				blocks: {
					block: {
						min: 0,
						max: Infinity
					}
				},
				inline: {
					inline: {
						min: 0,
						max: Infinity
					}
				}
			}
		}
	},
	blocks: {
		root: {
			rawBody: false,
			props: {
				body: {
					defaultTag: {
						default: {
							min: 0,
							max: 1
						}
					},
					body: {
						body: {
							min: 1,
							max: 1
						}
					}
				}
			}
		},
		block: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "name"
				},
				body: {
					defaultTag: {
						default: {
							min: 0,
							max: 1
						}
					},
					head: {
						head: {
							min: 0,
							max: 1
						}
					},
					body: {
						body: {
							min: 0,
							max: 1
						}
					}
				}
			}
		},
		default: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "name"
				}
			}
		},
		head: {
			rawBody: false,
			props: {
				body: {
					type: {
						hashml: {
							min: 0,
							max: 1
						},
						string: {
							min: 0,
							max: 1
						},
						date: {
							min: 0,
							max: 1
						},
						url: {
							min: 0,
							max: 1
						}
					}
				}
			}
		},
		body: {
			rawBody: false,
			props: {
				body: {
					props: {
						prop: {
							min: 0,
							max: Infinity
						}
					}
				}
			}
		},
		prop: {
			rawBody: false,
			defaultTag: "item",
			props: {
				head: {
					raw: true,
					type: "string",
					name: "name"
				},
				body: {
					content: {
						optional: {
							min: 0,
							max: Infinity
						},
						one: {
							min: 0,
							max: Infinity
						},
						oneOrMore: {
							min: 0,
							max: Infinity
						},
						zeroOrMore: {
							min: 0,
							max: Infinity
						}
					}
				}
			}
		},
		optional: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "target"
				}
			}
		},
		one: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "target"
				}
			}
		},
		oneOrMore: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "target"
				}
			}
		},
		zeroOrMore: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "target"
				}
			}
		},
		inline: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "name"
				},
				body: {
					args: {
						args: {
							min: 1,
							max: 1
						}
					},
					sugar: {
						sugar: {
							min: 0,
							max: 1
						}
					}
				}
			}
		},
		args: {
			rawBody: false,
			props: {
				body: {
					args: {
						hashml: {
							min: 0,
							max: Infinity
						},
						string: {
							min: 0,
							max: Infinity
						},
						date: {
							min: 0,
							max: Infinity
						},
						url: {
							min: 0,
							max: Infinity
						}
					}
				}
			}
		},
		hashml: {
			rawBody: false,
			defaultTag: "item",
			props: {
				head: {
					raw: true,
					type: "string",
					name: "propName"
				},
				body: {
					content: {
						item: {
							min: 0,
							max: Infinity
						}
					}
				}
			}
		},
		item: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "target"
				}
			}
		},
		string: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "propName"
				}
			}
		},
		date: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "propName"
				}
			}
		},
		url: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "propName"
				}
			}
		},
		sugar: {
			rawBody: false,
			props: {
				body: {
					start: {
						start: {
							min: 1,
							max: 1
						}
					},
					separator: {
						separator: {
							min: 0,
							max: 1
						}
					},
					end: {
						end: {
							min: 1,
							max: 1
						}
					}
				}
			}
		},
		start: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "token"
				}
			}
		},
		separator: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "token"
				}
			}
		},
		end: {
			rawBody: false,
			props: {
				head: {
					raw: true,
					type: "string",
					name: "token"
				}
			}
		}
	},
	inline: {}
};

export function parseTyped(file: string): Root | HMError[] {
	const errors: HMError[] = [];
	const logger = (err: HMError) => errors.push(err);
	const result = parse(file, schema, logger);
	if (errors.length === 0) {
		return (result as unknown) as Root;
	} else {
		return errors;
	}
}
