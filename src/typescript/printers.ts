import { SchemaDefinition } from "../schema/SchemaDefinition";

const indentation = " ".repeat(4);

export const disclaimer =
	"/*! This file was generated by Hashml https://github.com/hashml/hashml */";

export function createImport(members: string[], importPath: string): string {
	return `import { ${members.join(", ")} } from "${importPath}";`;
}

export function createSchema(definition: SchemaDefinition): string {
	// TODO! Temporary Hack
	const schemaObject = JSON.stringify(definition, null, indentation)
		.replace(/\"min\": null/g, '"min": Infinity')
		.replace(/\"max\": null/g, '"max": Infinity');
	return `const schema: SchemaDefinition = ${schemaObject};`;
}

export const createParserFunction = (type: string) => `
export function parseTyped(file: string): ${type} | HMError[] {
    const errors: HMError[] = [];
    const logger = (err: HMError) => errors.push(err);
    const result = parse(file, schema, logger);
    if (errors.length === 0) {
        return (result as unknown) as ${type};
    } else {
        return errors;
    }
}`;

export function createInterfaceMember(name: string, type: string): string {
	return `${name}: ${type};`;
}

export const createInterface = (typeName: string, members: string[]) => `
export interface ${typeName} {
    ${members.join("\n" + indentation)}
}`;

export function createLiteralStringType(str: string): string {
	return JSON.stringify(str);
}

export function createArrayType(type: string): string {
	return type + "[]";
}

export function createUnionType(members: string[]): string {
	if (members.length === 0) return "never";
	if (members.length === 1) return members[0];
	return "(" + members.join(" | ") + ")";
}

export function createTypeAlias(alias: string, type: string): string {
	return `export type ${alias} = ${type};`;
}
